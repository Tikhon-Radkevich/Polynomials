import math

from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import numpy as np


class Neuron:
    def __init__(self, learning_rate):
        self.learning_rate = learning_rate
        self.weight = 1
        self.deg = 1
        self.bias = 0

    def forward(self, x):
        return 


class SimpleRegression:

    def __init__(self):
        self.degree = None
        self.coefficients = []

    def polynomial_features(self, x):
        """ Function to calculate the polynomial features """
        features = [x ** d for d in range(1, self.degree + 1)]
        return features

    def fit_polynomial_regression(self, x_train, y_train, degree):
        """ Function to fit a polynomial regression model """
        self.degree = degree

        # Create the design matrix with polynomial features
        x_data = [self.polynomial_features(x) for x in x_train]

        # Calculate the coefficients using closed-form solution
        self.coefficients = [
            sum(x_data[j][i] * y for j, y in enumerate(y_train)) /
            sum(x_data[j][i] ** 2 for j in range(len(x_train)))
            for i in range(self.degree)
        ]

    def predict(self, x):
        """ Function to predict y-coordinate using the trained coefficients """
        return sum(self.coefficients[i] * (x ** (i + 1)) for i in range(len(self.coefficients)))

    @staticmethod
    def rmse(predictions, actual):
        """ Calculate RMSE """
        return math.sqrt(sum((p - a) ** 2 for p, a in zip(predictions, actual)) / len(predictions))


class CustomPolynomialRegressor:
    def __init__(self, degree=1):
        self.degree = degree
        self.coefficients = None

    def fit(self, x_train, y_train):
        x_powers = [[x ** d for d in range(self.degree + 1)] for x in x_train]
        X = self.add_ones_column(x_powers)
        self.coefficients = self.calculate_coefficients(X, y_train)

    def predict(self, x_test):
        x_powers = [[x ** d for d in range(self.degree + 1)] for x in x_test]
        X = self.add_ones_column(x_powers)
        y_pred = [sum(c * xi for c, xi in zip(self.coefficients, row)) for row in X]
        return y_pred

    @staticmethod
    def rmse(y_true, y_pred):
        n = len(y_true)
        squared_errors = [(true - pred) ** 2 for true, pred in zip(y_true, y_pred)]
        mse = sum(squared_errors) / n
        rmse = mse ** 0.5
        return rmse

    def add_ones_column(self, X):
        ones_column = [[1] for _ in range(len(X))]
        return [row + ones for row, ones in zip(X, ones_column)]

    def calculate_coefficients(self, X, y):
        XtX = self.matrix_transpose_multiply(X, X)
        XtX_inv = self.matrix_inverse(XtX)
        XtY = self.matrix_transpose_multiply(X, y)
        return self.matrix_multiply(XtX_inv, XtY)

    def matrix_transpose_multiply(self, A, B):
        return [[sum(a * b for a, b in zip(row_a, col_b)) for col_b in zip(*B)] for row_a in A]

    def matrix_inverse(self, A):
        n = len(A)
        identity = [[1 if i == j else 0 for j in range(n)] for i in range(n)]

        for col in range(n):
            diagonal_element = A[col][col]
            for row in range(n):
                A[col][row] /= diagonal_element
                identity[col][row] /= diagonal_element

            for other_col in range(n):
                if other_col != col:
                    factor = A[other_col][col]
                    for row in range(n):
                        A[other_col][row] -= factor * A[col][row]
                        identity[other_col][row] -= factor * identity[col][row]

        return identity

    def matrix_multiply(self, A, B):
        return [[sum(a * b for a, b in zip(row_a, col_b)) for col_b in zip(*B)] for row_a in A]


def main(degree):
    # Define the train data (x, y) pairs
    train_data = [(-91, 1548284.0), (1126, -2848913984.0), (668, -593922130.0), (885, -1382389460.0), (963, -1781472950.0), (1120, -2803580630.0), (-1117, 2793572330.0), (-1044, 2281232926.0), (301, -54087884.0), (407, -134008810.0), (1079, -2506607626.0), (1136, -2925551014.0), (-345, 82721350.0), (-1033, 2209938230.0), (-145, 6201950.0), (193, -14191280.0), (-429, 158826106.0), (590, -409015720.0), (1125, -2841324740.0), (186, -12696164.0), (-325, 69183410.0), (796, -1005546194.0), (69, -632996.0), (-3, 100.0), (-659, 574551796.0), (-946, 1697652824.0), (-398, 126880420.0), (868, -1304174330.0), (-852, 1240567390.0), (404, -131061226.0), (603, -436692590.0), (898, -1444266860.0), (-678, 625627900.0), (-436, 166712894.0), (58, -373220.0), (1009, -2049394016.0), (-777, 941211190.0), (278, -42582640.0), (139, -5274206.0), (-1011, 2071836244.0), (-86, 1308844.0), (-739, 809895236.0), (412, -139019090.0), (734, -788197816.0), (-225, 23033710.0), (557, -344064460.0), (761, -878524264.0), (-856, 1258105154.0), (44, -160546.0), (849, -1220313536.0), (-250, 31561760.0), (-992, 1957300330.0), (-479, 220950256.0), (-580, 391904270.0), (-852, 1240567390.0), (-19, 15476.0), (-301, 54993914.0), (-660, 577168030.0), (-1190, 3377394940.0), (-359, 93179896.0), (278, -42582640.0), (-565, 362318690.0), (-485, 229342930.0), (821, -1103402644.0), (260, -34813210.0), (758, -868163920.0), (982, -1889107760.0), (-1027, 2171683940.0), (-923, 1576917820.0), (391, -118787354.0), (704, -695347126.0), (575, -378563890.0), (-193, 14563790.0), (107, -2392510.0), (-185, 12833830.0), (1108, -2714361770.0), (-691, 662264084.0), (610, -452099660.0), (800, -1020797590.0), (580, -388540250.0), (-207, 17953120.0), (-930, 1613035720.0), (899, -1449101686.0), (934, -1625196416.0), (744, -820891646.0), (-566, 364243084.0), (499, -247256486.0), (-1177, 3267987590.0), (-773, 926765170.0), (1033, -2199267320.0), (-1118, 2801076340.0), (-870, 1320787900.0), (-404, 132693406.0), (478, -217286840.0), (260, -34813210.0), (-504, 257316706.0), (875, -1336012990.0), (153, -7045640.0), (-544, 323456426.0), (158, -7763320.0), (1030, -2180146400.0), (-10, 2480.0), (-857, 1262515270.0), (534, -303119216.0), (1140, -2956586570.0), (1013, -2073884500.0), (-780, 952143670.0), (-392, 121239730.0), (187, -12902990.0), (-76, 906614.0), (35, -79510.0), (-385, 114873230.0), (950, -1710234640.0), (501, -250246484.0), (-569, 370057126.0), (-349, 85625066.0), (741, -810990404.0), (-103, 2238200.0), (-952, 1730131490.0), (-1165, 3169116890.0), (-1144, 3000928226.0), (152, -6907630.0), (552, -334868030.0), (-506, 260387104.0), (-795, 1008077500.0), (858, -1259574020.0), (94, -1616696.0), (-928, 1602660650.0), (490, -234096020.0), (272, -39876550.0), (-714, 730535536.0), (464, -198716806.0), (158, -7763320.0), (168, -9341630.0), (-147, 6460660.0), (363, -95004350.0), (-576, 383863114.0), (330, -71328500.0), (774, -924371936.0), (502, -251750480.0), (-93, 1651690.0), (-377, 107874790.0), (518, -276640480.0), (-590, 412496740.0), (702, -689430680.0), (-200, 16199410.0), (-1026, 2165351464.0), (994, -1959272396.0), (860, -1268411410.0), (707, -704285110.0), (425, -152626840.0), (934, -1625196416.0), (576, -380545334.0), (404, -131061226.0), (-783, 963160480.0), (302, -54630280.0), (287, -46867090.0), (-1123, 2838798020.0), (-26, 38464.0), (620, -474732130.0), (-151, 6999464.0), (-283, 45729980.0), (-835, 1167849380.0), (701, -686485084.0), (172, -10028450.0), (-219, 21246076.0), (580, -388540250.0), (-1178, 3276318400.0), (1193, -3388752280.0), (-956, 1752012454.0), (52, -267530.0), (-197, 15484210.0), (-212, 19280350.0), (1051, -2316345134.0), (-374, 105325516.0), (970, -1820638580.0), (1097, -2634259000.0), (697, -674786600.0), (-500, 251248510.0), (-1054, 2347362356.0), (-204, 17186806.0), (-946, 1697652824.0), (240, -27359270.0), (480, -220030550.0), (-720, 749085850.0), (-351, 87102064.0), (14, -4456.0), (-617, 471671830.0), (-648, 546293170.0), (476, -214566034.0), (-1085, 2560461130.0), (742, -814281920.0), (293, -49877380.0), (1099, -2648704286.0), (-482, 225120520.0), (964, -1787033306.0), (-794, 1004282176.0), (557, -344064460.0), (-1200, 3463196410.0), (-940, 1665583190.0), (80, -991750.0), (-608, 451357930.0), (715, -728493470.0), (940, -1656747170.0), (-594, 420931576.0), (441, -170558504.0), (-251, 31940764.0), (939, -1651460606.0), (-999, 1998993016.0), (-477, 218198890.0), (1183, -3304189970.0), (591, -411101954.0), (989, -1929829756.0), (22, -18800.0), (405, -132038900.0), (97, -1778000.0), (-1152, 3064279690.0), (-35, 91780.0), (-579, 389883556.0), (333, -73296620.0), (646, -537083744.0), (350, -85136440.0), (-415, 143806640.0), (313, -60837800.0), (14, -4456.0), (-607, 449137520.0), (-41, 146134.0), (-100, 2049710.0), (-620, 478576150.0), (-1187, 3351933700.0), (281, -43980424.0), (585, -398690360.0), (25, -28040.0), (-379, 109596956.0), (-876, 1348277014.0), (-1106, 2711910904.0), (387, -115171190.0), (-910, 1511279780.0), (697, -674786600.0), (-935, 1639169080.0), (-698, 682570720.0), (703, -692384690.0), (-173, 10504570.0), (-692, 665140030.0), (367, -98187170.0), (976, -1854662534.0), (-272, 40616410.0), (-319, 65431376.0), (-843, 1201704940.0), (-635, 514109980.0), (-451, 184483364.0), (543, -318730130.0), (551, -333048634.0), (1126, -2848913984.0), (256, -33225974.0), (-1192, 3394440530.0), (88, -1323950.0), (390, -117876320.0), (-653, 559020250.0), (1105, -2692356800.0), (238, -26678600.0), (299, -53013886.0), (-22, 23660.0), (-1034, 2216357296.0), (378, -107304740.0), (691, -657489254.0), (1186, -3329409164.0), (-252, 32322790.0), (345, -81531080.0), (43, -149630.0), (879, -1354437026.0), (658, -567613820.0), (-887, 1399659400.0), (-240, 27935290.0), (-1142, 2985227980.0), (-86, 1308844.0), (-1115, 2778604540.0), (-667, 595704380.0), (717, -734631020.0), (193, -14191280.0), (-731, 783905404.0), (-76, 906614.0), (186, -12696164.0), (601, -432355784.0), (-207, 17953120.0), (480, -220030550.0), (-321, 66666574.0), (144, -5867846.0), (-1097, 2646293110.0), (-410, 138681280.0), (643, -529626230.0), (-812, 1074068950.0), (236, -26009314.0), (-85, 1264130.0), (843, -1194598430.0), (-957, 1757511370.0), (741, -810990404.0), (-1176, 3259670914.0), (-643, 533760740.0), (1008, -2043301670.0), (-437, 167860450.0), (985, -1906489160.0), (-974, 1852761316.0), (-585, 402112630.0), (-1189, 3368893586.0), (567, -362959370.0), (766, -895974104.0), (-33, 77230.0), (-124, 3889766.0), (354, -88096076.0), (-967, 1813134680.0), (-996, 1981052974.0), (1195, -3405836030.0), (967, -1803783770.0), (-910, 1511279780.0), (542, -316969720.0), (701, -686485084.0), (-787, 977981300.0), (-1011, 2071836244.0), (696, -671882894.0), (-722, 755338360.0), (-627, 494947540.0), (-16, 9434.0), (-721, 752207774.0), (-1188, 3360406510.0), (741, -810990404.0), (-889, 1409139686.0), (900, -1453947290.0), (-911, 1516262944.0), (-1120, 2816124650.0), (-304, 56650106.0), (-113, 2949310.0), (185, -12491560.0), (793, -994207880.0), (484, -225587066.0), (-353, 88595950.0), (-965, 1801917490.0), (889, -1401236456.0), (-746, 833102224.0), (-1118, 2801076340.0), (-1075, 2490368660.0), (-941, 1670899834.0), (-532, 302551070.0), (-386, 115768744.0), (189, -13323356.0), (33, -66320.0), (-569, 370057126.0), (378, -107304740.0), (574, -376589336.0), (-1116, 2786081734.0), (1044, -2270333546.0), (481, -221411024.0), (-873, 1334485270.0), (-608, 451357930.0), (179, -11309926.0), (161, -8216464.0), (-769, 912467726.0), (913, -1517926400.0), (-429, 158826106.0), (-64, 544586.0), (1046, -2283416944.0), (264, -36450206.0), (-828, 1138752550.0), (-1074, 2483430616.0), (334, -73960616.0), (-306, 57772504.0), (-1084, 2553393446.0), (114, -2897756.0), (-306, 57772504.0), (-69, 680626.0), (-623, 485547520.0), (1023, -2135962610.0), (-1087, 2574635600.0), (-638, 521421460.0), (523, -284742110.0), (18, -9980.0), (491, -235534654.0), (-1166, 3177278884.0), (-458, 193191280.0), (-71, 740824.0), (-996, 1981052974.0), (1038, -2231383400.0), (891, -1410723854.0), (323, -66873910.0), (628, -493372490.0), (456, -188596574.0), (-551, 336084664.0), (-781, 955806554.0), (316, -62608754.0), (-540, 316384390.0), (1108, -2714361770.0), (-1073, 2476505470.0), (407, -134008810.0), (152, -6907630.0), (-161, 8475694.0), (-433, 163301630.0), (-383, 113096080.0), (697, -674786600.0), (-95, 1759600.0), (-415, 143806640.0), (1010, -2055498460.0), (796, -1005546194.0), (-13, 5210.0), (47, -196450.0), (-166, 9285884.0), (240, -27359270.0), (152, -6907630.0), (594, -417403196.0), (-802, 1034912840.0), (672, -604668950.0), (-1086, 2567541844.0), (889, -1401236456.0), (-1148, 3032493670.0), (855, -1246395050.0), (129, -4209776.0), (-78, 979300.0), (-424, 153347666.0), (-268, 38855990.0), (-317, 64211530.0), (811, -1063532414.0), (1118, -2788577080.0), (376, -105606734.0), (-593, 418812190.0), (1124, -2833748986.0), (-480, 222334570.0), (-712, 724420850.0), (-419, 147996676.0), (932, -1614769210.0), (-1081, 2532268454.0), (1026, -2154824684.0), (-30, 58420.0), (-530, 299156920.0), (177, -10933280.0), (-778, 944846000.0), (83, -1108870.0), (199, -15562586.0), (868, -1304174330.0), (-961, 1779622094.0), (-217, 20671430.0), (-722, 755338360.0), (264, -36450206.0), (-1150, 3048359060.0), (-288, 48189610.0), (-696, 676727074.0), (-545, 325240750.0), (-1065, 2421567190.0), (-753, 856748350.0), (956, -1742873074.0), (-356, 90868654.0), (-726, 767947564.0), (-829, 1142879306.0), (-629, 499692706.0), (812, -1067475490.0), (-134, 4901596.0), (895, -1429826930.0), (-513, 271325710.0), (-244, 29350526.0), (862, -1277290040.0), (780, -946059650.0), (-280, 44295170.0), (-791, 992953384.0), (755, -857885350.0), (811, -1063532414.0), (1120, -2803580630.0), (0, 10.0), (890, -1405974820.0), (-673, 611905070.0), (-1124, 2846382766.0), (-510, 266600980.0), (547, -325836950.0), (436, -164811914.0), (21, -16244.0), (308, -57960970.0), (824, -1115555086.0), (-384, 113982346.0), (279, -43045226.0), (-1056, 2360739754.0), (536, -306543214.0), (-1155, 3088264420.0), (1111, -2736486314.0), (-1172, 3226545310.0), (-790, 989196140.0), (388, -116068250.0), (-671, 606472624.0), (163, -8528150.0), (811, -1063532414.0), (3, 10.0), (-44, 179926.0), (860, -1268411410.0), (-524, 289126966.0), (147, -6244550.0), (609, -449876816.0), (-1032, 2203531570.0), (339, -77340806.0), (692, -660351370.0), (500, -248748490.0), (575, -378563890.0), (-669, 601072426.0), (454, -186121376.0), (1036, -2218499714.0), (1177, -3254134280.0), (-861, 1280258794.0), (546, -324050444.0), (-411, 139696444.0), (-951, 1724689864.0), (-590, 412496740.0), (509, -262447516.0), (-243, 28992340.0), (658, -567613820.0), (75, -815390.0), (-451, 184483364.0), (-354, 89349256.0), (470, -206540080.0), (-885, 1390221730.0), (-283, 45729980.0), (97, -1778000.0), (828, -1131896690.0), (381, -109885724.0), (1086, -2555747864.0), (-992, 1957300330.0), (110, -2601160.0), (963, -1781472950.0), (-1022, 2140144660.0), (-419, 147996676.0), (123, -3645710.0), (507, -259360910.0), (-1066, 2428389584.0), (-651, 553905964.0), (347, -82960750.0), (1060, -2376410810.0), (-507, 261931420.0), (616, -465590654.0), (-1011, 2071836244.0), (190, -13536920.0), (-238, 27245060.0), (569, -366819496.0), (-561, 354688894.0), (-175, 10871360.0), (809, -1055675416.0), (-586, 404175344.0), (-5, 370.0), (-99, 1989316.0), (-1071, 2462693824.0), (-1191, 3385910584.0), (-275, 41971060.0), (1129, -2871762776.0), (-229, 24279506.0), (-237, 26904250.0), (-523, 287477420.0), (-1184, 3326600746.0), (-564, 360401086.0), (943, -1672674530.0), (551, -333048634.0), (882, -1368365660.0), (496, -242816294.0), (-549, 332443666.0), (-264, 37147186.0), (846, -1207410344.0), (1017, -2098569320.0), (-850, 1231859960.0), (511, -265558514.0), (420, -147292730.0), (992, -1947459670.0), (-1084, 2553393446.0), (308, -57960970.0), (-444, 176041126.0), (-1046, 2294358124.0), (128, -4111990.0), (186, -12696164.0), (77, -883180.0), (-795, 1008077500.0), (446, -176437144.0), (459, -192350366.0), (-1011, 2071836244.0), (615, -463323770.0), (1133, -2902417420.0), (-884, 1385518846.0), (766, -895974104.0), (-1172, 3226545310.0), (-890, 1413895840.0), (769, -906554096.0), (-589, 410405786.0), (753, -851078240.0), (-416, 144846634.0), (209, -18039616.0), (-421, 150121874.0), (31, -54674.0), (-780, 952143670.0), (50, -237340.0), (1108, -2714361770.0), (-756, 867017854.0), (-998, 1993001020.0), (-1038, 2242157860.0), (922, -1563301700.0), (-1030, 2190755420.0), (-147, 6460660.0), (862, -1277290040.0), (262, -35625440.0), (-704, 700303306.0), (1005, -2025097100.0), (-336, 76429594.0), (136, -4938014.0), (717, -734631020.0), (987, -1918135790.0), (551, -333048634.0), (-950, 1719259660.0), (-605, 444718570.0), (742, -814281920.0), (-1086, 2567541844.0), (-962, 1785178600.0), (-9, 1846.0), (-365, 97919290.0), (-882, 1376144920.0), (-273, 41064670.0), (473, -210527560.0), (-484, 227929646.0), (46, -183944.0), (620, -474732130.0), (-493, 240860090.0), (-552, 337915090.0), (126, -3920984.0), (-914, 1531278136.0), (1155, -3074924150.0), (1058, -2362974220.0), (707, -704285110.0), (-622, 483216260.0), (-109, 2649146.0), (1047, -2289977450.0), (-506, 260387104.0), (1057, -2356274960.0), (716, -731557954.0), (165, -8847620.0), (370, -100620380.0), (104, -2195326.0), (-1070, 2455807300.0), (427, -154796030.0), (479, -218655826.0), (803, -1032336790.0), (535, -304828010.0), (-648, 546293170.0)]
    x_data = [point[0] for point in train_data]
    y_data = [point[1] for point in train_data]

    y_max = max(y_data)
    x_max = max(x_data)
    x_data = list(map(lambda val: val / x_max, x_data))
    y_data = list(map(lambda val: val / y_max, y_data))

    x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=0.2, random_state=42)

    model = np.poly1d(np.polyfit(x_train, y_train, degree))
    y_pred = model(x_test)

    # Fit the polynomial regression model
    # regressor = CustomPolynomialRegressor(degree=3)
    # regressor.fit(x_train, y_train)

    # y_pred = regressor.predict(x_test)

    # Calculate RMSE between predicted and true y-coordinates
    rmse = SimpleRegression.rmse(y_test, y_pred)

    # model = SimpleRegression()
    # model.fit_polynomial_regression(x_train, y_train, degree)

    # Test the model with new x values
    # predictions = [model.predict(x) for x in x_test]

    # Calculate RMSE
    # error = SimpleRegression.rmse(predictions, y_test)
    print(f"degree {degree}; RMSE: {rmse}")


if __name__ == "__main__":
    ds = [i for i in range(1, 10)]
    for d in ds:
        main(d)
